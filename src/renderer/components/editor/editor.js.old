/**--renderer/editor.js---------------------------------------------/
 *
 * Part of the kerma project
 * 
 *------------------------------------------------------------------/
 * 
 * @file renderer/editor.js
 * @author gkarlos 
 * @module renderer/editor
 * @description 
 *   Defines functionality relevant to the editor(s)  
 *  
 *-----------------------------------------------------------------*/
'use strict'

const {app} = require('electron').remote
const path  = require('path')
const {InternalError} = require('../util/error')
const {AceEditorWrapper} = require('./editor-wrappers/AceEditorWrapper')
const {MonacoEditorWrapper} = require('./editor-wrappers/MonacoEditorWrapper')


/**
 * Facade for AceEditorWrapper and MonacoWrapper
 */
class Editor {
  /**
   * @param {string} impl Editor implementation to use. Accepted values <br/>
   *                      `"ace"` for the ACE Editor [https://ace.c9.io/](https://ace.c9.io/) <br/>
   *                      `"monaco"` for the Monaco Editor 
   *                      [https://microsoft.github.io/monaco-editor/](https://microsoft.github.io/monaco-editor/)
   * @param {string} location The ID of a valid DOM element where the editor will be loaded
   */
  constructor(location, value, editor="monaco") {
    if ( typeof location != 'string' && !(location instanceof String))
      throw new InternalError(`Invalid argument 'location' @Editor.constructor. Expected String, got ${typeof location}`)
    if ( value !== null && typeof value != 'string' && !(value instanceof String))
      throw new InternalError(`Invalid argument 'value' @Editor.constructor. Expected String, got ${typeof location}`)
    if ( typeof name != 'string' && !(name instanceof String))
      throw new InternalError(`Invalid argument 'editor' @Editor.constructor. Expected string, got ${typeof name}`)
    
    this.wrapper = (editor === 'ace')? new AceEditorWrapper(location, value)
                                     : new MonacoEditorWrapper(location, value)
    // Set synchronously
    this.location_ = location
  }

  /** Load the Editor into the DOM */
  load(async=false) { return this.wrapper.load(async);}

  /** Check whether the editor has been loaded into the dom */
  get loaded() { return this.wrapper.loaded(); }

  /** Get the name of the underlying editor */
  get name() { return this.wrapper.name; }

  /** Get an instance to the underlying editor impl (ace or monaco) */
  get impl() { return this.wrapper.instance; }

  get location() { return this.location_; }

  // /**
  //  * Set the contents of the editor instance. 
  //  * 
  //  * @param {object} content 
  //  * @param {string} content.type Type of contents `"text"` or `"file"`
  //  * @param {string} content.value
  //  * @throws InternalError 
  //  * @throws FileNotFoundError
  //  */  
  // setContent(content) {
  //   if ( content && content.type) {
  //     if ( content.type == "text")
  //       return this.setContentText(content.value)
  //     if ( content.type == "file")
  //       return this.setContentFile(content.value)
  //   } 
  //   return this;
  // }
  // /** 
  //  * Set the contents the editor currently dispays
  //  * 
  //  * @param {string} content The new value for contents
  //  * @throws {InternalError}
  //  * */
  // setContentText(txt) {
  //   //TODO error check param
  //   if ( this.loaded_ )
  //     this.ace_.setValue(txt);
  //   else
  //     this.content_ = txt;
  //   return this;
  // }

  // setContentFile(filepath) {

  // }

  /** 
   * Highlight a specific row 
   */
  higlightRow(i, highlighter=null) {

  }

  /**
   * Highlight part of the contents of the editor. When values are 
   * nonsensical (e.g negative range) it is a no-op. 
   * 
   * Passing no arguments will highlight the full contents
   * 
   * @param {integer} fromRow - Starting row
   * @param {integer} fromCol - Stating column.  
   * @param {integer} toRow   - Ending row (inclusive). If not set, 
   *                            the rest of the contents will be highlighted
   * @param {integer} toCol   - Ending column (inclusive). If not set,
   *                            highlighting will stop at the last character of
   *                            the last column. Ignored if set but {@link toRow} 
   *                            is not
   * @param {*} highlighter 
   */
  highlightRange(fromRow=0, fromCol=0, toRow=undefined, toCol, highlighter=null) {
    //TODO implement me
    return this
  }

}

Editor.ACE = "ace"
Editor.MONACO = "monaco"

module.exports = {
  Editor
}